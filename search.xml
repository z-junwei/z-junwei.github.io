<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring Data JPA的简单使用</title>
    <url>/2022/11/09/JPA%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>工作中偶然用到的Spring Data JPA，那就浅浅的学习一下吧！</p>
<span id="more"></span>

<h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jpa--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">4652</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">&quot;update&quot;</span> <span class="comment">#自动更新</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="string">&quot;true&quot;</span>  <span class="comment">#日志中打印sql语句</span></span><br></pre></td></tr></table></figure>

<p>ddl-auto配置说明：</p>
<ul>
<li>create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。</li>
<li>create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭，表就自动删除。</li>
<li>update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。</li>
<li>validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</li>
</ul>
<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>启动会自动创建好，前提数据库要建好。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;User&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span> <span class="comment">//主键自增策略，这里也可以使用自定义</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="CrudRepository"><a href="#CrudRepository" class="headerlink" title="CrudRepository"></a>CrudRepository</h4><p>可以实现简单的crud，首先要创建一个UserRepository：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.testdemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line"><span class="comment">//继承后可以进行简单的crud操作了，不需要额外写代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看一下<code>CrudRepository</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CrudRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;T, ID&gt; &#123;</span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; S <span class="title function_">save</span><span class="params">(S entity)</span>;</span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; Iterable&lt;S&gt; <span class="title function_">saveAll</span><span class="params">(Iterable&lt;S&gt; entities)</span>;</span><br><span class="line">    Optional&lt;T&gt; <span class="title function_">findById</span><span class="params">(ID id)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">existsById</span><span class="params">(ID id)</span>;</span><br><span class="line">    Iterable&lt;T&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    Iterable&lt;T&gt; <span class="title function_">findAllById</span><span class="params">(Iterable&lt;ID&gt; ids)</span>;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(ID id)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(T entity)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteAllById</span><span class="params">(Iterable&lt;? extends ID&gt; ids)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">(Iterable&lt;? extends T&gt; entities)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;find&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JpaRepository"><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h4><p>可以实现通过自己的SQL进行查询，其实大多数用的是<code>JpaRepository</code>，首先编写UserService类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.testdemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    <span class="meta">@Query(value = &quot;select id,name,age from user  where name = :userName&quot;,nativeQuery = true)</span></span><br><span class="line">    User <span class="title function_">getUserByName</span><span class="params">(<span class="meta">@Param(&quot;userName&quot;)</span> String userName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nativeQuery属性说明：</p>
<ul>
<li>@Query有nativeQuery=true，表示可执行的原生sql，原生sql指可以直接复制sql语句给参数赋值就能运行，打印出来的你自己写的</li>
<li>@Query无nativeQuery=true， 表示不是原生sql，查询语句中的表名则是对应的项目中实体类的类名</li>
</ul>
<p>调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;findByName&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.getUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JpaSpecificationExecutor"><a href="#JpaSpecificationExecutor" class="headerlink" title="JpaSpecificationExecutor"></a>JpaSpecificationExecutor</h4><p>有时候会进行复杂查询，这时候就要继承<code>JpaSpecificationExecutor&lt;T&gt;</code>方法了，泛型内传入实体类，只要简单实现<code>toPredicate</code>方法就可以实现复杂的查询，方法中的<code>Specification</code>就是需要我们传进去的参数，它是一个接口,也是我们实现复杂查询的关键,其中只有一个方法<code>toPredicate</code></p>
<p>我们来看一看方法内部：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JpaSpecificationExecutor</span>&lt;T&gt; &#123;</span><br><span class="line">    Optional&lt;T&gt; <span class="title function_">findOne</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; var1)</span>;</span><br><span class="line">    List&lt;T&gt; <span class="title function_">findAll</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; var1)</span>;</span><br><span class="line">    Page&lt;T&gt; <span class="title function_">findAll</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; var1, Pageable var2)</span>;</span><br><span class="line">    List&lt;T&gt; <span class="title function_">findAll</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; var1, Sort var2)</span>;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">count</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先UserRepository 再继承 JpaSpecificationExecutor<User>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; , JpaSpecificationExecutor&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<h5 id="单条件"><a href="#单条件" class="headerlink" title="单条件"></a>单条件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单条件：使用年龄查询</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;findUserByCond&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findUserByCond</span><span class="params">(<span class="meta">@RequestParam</span> String age, <span class="meta">@RequestParam</span> String name)</span>&#123;</span><br><span class="line">       <span class="type">Specification</span> <span class="variable">specification</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Specification</span>() &#123;</span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@return</span> Predicate:定义了查询条件</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> root&lt;Users&gt; root:根对象。封装了查询条件的对象</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> query&lt;?&gt; query:定义了一个基本的查询。一般不使用</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> criteriaBuilder criteriaBuilder:创建一个查询条件</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Predicate <span class="title function_">toPredicate</span><span class="params">(Root root, CriteriaQuery query, CriteriaBuilder criteriaBuilder)</span> &#123;</span><br><span class="line">               <span class="comment">//根据年龄</span></span><br><span class="line">               <span class="keyword">return</span> criteriaBuilder.equal(root.get(<span class="string">&quot;age&quot;</span>),age);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       List&lt;User&gt; user = userRepository.findAll(specification);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="多条件"><a href="#多条件" class="headerlink" title="多条件"></a>多条件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多条件：使用姓名and年龄查询</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;findUserByCond&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findUserByCond</span><span class="params">(<span class="meta">@RequestParam</span> String age, <span class="meta">@RequestParam</span> String name)</span>&#123;</span><br><span class="line">       <span class="type">Specification</span> <span class="variable">specification</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Specification</span>() &#123;</span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@return</span> Predicate:定义了查询条件</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> root&lt;Users&gt; root:根对象。封装了查询条件的对象</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> query&lt;?&gt; query:定义了一个基本的查询。一般不使用</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> criteriaBuilder cb:创建一个查询条件</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Predicate <span class="title function_">toPredicate</span><span class="params">(Root root, CriteriaQuery query, CriteriaBuilder criteriaBuilder)</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> criteriaBuilder.and(criteriaBuilder.equal(root.get(<span class="string">&quot;age&quot;</span>),age),</span><br><span class="line">                                          criteriaBuilder.equal(root.get(<span class="string">&quot;name&quot;</span>),name));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       List&lt;User&gt; user = userRepository.findAll(specification);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="分页与排序"><a href="#分页与排序" class="headerlink" title="分页与排序"></a>分页与排序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页与排序</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;findUserPageSort&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Page <span class="title function_">findUserPageSort</span><span class="params">(<span class="meta">@RequestParam</span> String age)</span>&#123;</span><br><span class="line">       <span class="type">Specification</span> <span class="variable">specification</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Specification</span>() &#123;</span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@return</span> Predicate:定义了查询条件</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> root&lt;Users&gt; root:根对象。封装了查询条件的对象</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> query&lt;?&gt; query:定义了一个基本的查询。一般不使用</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> criteriaBuilder cb:创建一个查询条件</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Predicate <span class="title function_">toPredicate</span><span class="params">(Root root, CriteriaQuery query, CriteriaBuilder criteriaBuilder)</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> criteriaBuilder.equal(root.get(<span class="string">&quot;age&quot;</span>),age);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">//排序</span></span><br><span class="line">       <span class="type">Sort</span> <span class="variable">sort</span> <span class="operator">=</span> Sort.by(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">       <span class="comment">//分页</span></span><br><span class="line">       <span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span>  PageRequest.of(<span class="number">0</span>,<span class="number">10</span>, sort);</span><br><span class="line">       Page&lt;User&gt; page = userRepository.findAll(specification, pageable);</span><br><span class="line">       System.out.println(<span class="string">&quot;总条数：&quot;</span>+page.getTotalElements());</span><br><span class="line">       System.out.println(<span class="string">&quot;总页数：&quot;</span>+page.getTotalPages());</span><br><span class="line">       List&lt;User&gt; users = page.getContent();</span><br><span class="line">       System.out.println(users.toString());</span><br><span class="line">       <span class="keyword">return</span> page;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/spring/202211091743708.png" alt="image-20221109174339660"></p>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/chenglc/p/11226693.html">https://www.cnblogs.com/chenglc/p/11226693.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IoC源码解析</title>
    <url>/2022/11/04/Spring%20IoC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>Spring源码，一生之敌！</p>
<span id="more"></span>

<h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><ul>
<li>不要在意版本，核心思想不变</li>
<li>抓住骨架进行学习，覆盖所有细节难度太大<ul>
<li>解析配置</li>
<li>定位与注册对象</li>
<li>注入对象</li>
</ul>
</li>
</ul>
<h2 id="注入bean的方式"><a href="#注入bean的方式" class="headerlink" title="注入bean的方式"></a>注入bean的方式</h2><p>先演示一下两种方式获取bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjw.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WelcomeService</span> &#123;</span><br><span class="line">	String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjw.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjw.service.WelcomeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WelcomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">WelcomeService</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello, &quot;</span> + name);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基于Xml"><a href="#基于Xml" class="headerlink" title="基于Xml"></a>基于Xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;welcomeService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjw.service.impl.WelcomeServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjw.service.WelcomeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.zjw&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Entrance</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">xmlPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\study\\SpringSourceCode\\spring-framework-5.2.0.RELEASE\\springdemo\\src\\main\\resources\\spring\\spring-config.xml&quot;</span>;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(xmlPath);</span><br><span class="line">		<span class="type">WelcomeService</span> <span class="variable">welcomeService</span> <span class="operator">=</span> (WelcomeService) applicationContext.getBean(<span class="string">&quot;welcomeService&quot;</span>);</span><br><span class="line">		welcomeService.sayHello(<span class="string">&quot;spring&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/IoCAnalysis202211041639236.png" alt="image-20221104163904204" style="zoom:67%;" />

<h3 id="基于Annotation"><a href="#基于Annotation" class="headerlink" title="基于Annotation"></a>基于Annotation</h3><p>把上面加了注解的类的注释解开。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjw.service.WelcomeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zjw&quot;)</span><span class="comment">//扫描哪个包下，和自研类似</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Entrance</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Entrance.class);</span><br><span class="line">		String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line">		<span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">			System.out.println(beanDefinitionName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">WelcomeService</span> <span class="variable">welcomeService</span> <span class="operator">=</span> (WelcomeService) applicationContext.getBean(<span class="string">&quot;welcomeServiceImpl&quot;</span>);</span><br><span class="line">		welcomeService.sayHello(<span class="string">&quot;spring&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/IoCAnalysis202211041642538.png" alt="image-20221104164218507" style="zoom:67%;" />

<p>在该包下加了注解的类都被加载到了bean容器中。</p>
<h2 id="Bean与BeanDefinition"><a href="#Bean与BeanDefinition" class="headerlink" title="Bean与BeanDefinition"></a>Bean与BeanDefinition</h2><p><strong>Bean是Spring的一等公民：</strong></p>
<ul>
<li>Bean的本质就是java对象，只是这个对象的声明周期由容器来管理</li>
<li>不需要为了创建Bean而在原来的java类上添加任何额外的限制</li>
<li>对java对象的控制方式体现在配置上</li>
</ul>
<p><strong>根据配置，生成用来描述Bean的BeanDefinition，常用属性∶</strong></p>
<ul>
<li>作用范围scope(@Scope)</li>
<li>懒加载lazy-init(@Lazy)：决定Bean实例是否延迟加载</li>
<li>首选primary(@Primary)：设置为true的bean会是优先的实现</li>
<li>factorv-bean和factorv-method(@Confiauration和@Bean）</li>
</ul>
<h3 id="代码显示"><a href="#代码显示" class="headerlink" title="代码显示"></a>代码显示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjw.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjw.entity.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjw.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态工厂调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactory</span> &#123;</span><br><span class="line">	<span class="comment">//静态的方法，返回User对象</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjw.entity.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjw.entity.User;</span><br><span class="line"><span class="comment">//实例工厂调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactory</span> &#123;</span><br><span class="line">	<span class="comment">//普通的方法，返回User对象</span></span><br><span class="line">	<span class="comment">//不能通过类名调用，需要通过对象调用</span></span><br><span class="line">	<span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjw.entity.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjw.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">		<span class="keyword">return</span> User.class;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Entrance</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//得到无参构造函数创建的对象:</span></span><br><span class="line">		<span class="type">User</span> <span class="variable">user1a</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">		<span class="type">User</span> <span class="variable">user1b</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">		<span class="comment">//得到静态工厂创建的对象：</span></span><br><span class="line">		<span class="type">User</span> <span class="variable">user2a</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">		<span class="type">User</span> <span class="variable">user2c</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">		<span class="comment">//得到实例工厂创建的对象：</span></span><br><span class="line">		<span class="type">User</span> <span class="variable">user3a</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user3&quot;</span>);</span><br><span class="line">		<span class="type">User</span> <span class="variable">user3b</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user3&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;无参构造函数创建的对象:&quot;</span> + user1a);</span><br><span class="line">		System.out.println(<span class="string">&quot;无参构造函数创建的对象:&quot;</span> + user1b);</span><br><span class="line">		System.out.println(<span class="string">&quot;静态工厂创建的对象：&quot;</span> + user2a);</span><br><span class="line">		System.out.println(<span class="string">&quot;静态工厂创建的对象：&quot;</span> + user2c);</span><br><span class="line">		System.out.println(<span class="string">&quot;实例工厂创建的对象：&quot;</span> + user3a);</span><br><span class="line">		System.out.println(<span class="string">&quot;实例工厂创建的对象：&quot;</span> + user3b);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;welcomeService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjw.service.impl.WelcomeServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 1.使用类的无参构造函数创建 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjw.entity.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span> <span class="attr">primary</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 2.使用静态工厂进行创建 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- class的值不是写User对象的全路径，而是写静态工厂的全路径 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- factory-method的值写要调用的方法 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjw.entity.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 3.使用实例工厂进行创建 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 需要先创建factoryBean对象，再通过factoryBean对象进行调用 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjw.entity.factory.UserFactory&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/IoCAnalysis/202211041719374.png" alt="image-20221104171933387"></p>
<p>你会发现当scope=”singleton”，对象相同；scope=”prototype”对象不同。</p>
<h3 id="容器初始化主要步骤"><a href="#容器初始化主要步骤" class="headerlink" title="容器初始化主要步骤"></a>容器初始化主要步骤</h3><p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/IoCAnalysis/202211041725233.png" alt="image-20221104172550192"></p>
<ul>
<li>解析配置</li>
<li>定位与注册对象</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>自研IoC框架</title>
    <url>/2022/11/04/%E8%87%AA%E7%A0%94IoC%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>迷你版IoC框架，简单的实现扫描配置并注入自定义的Bean容器。</p>
<span id="more"></span>

<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p><strong>一个框架最基本的功能：</strong></p>
<ul>
<li>解析配置</li>
<li>定位与注册对象</li>
<li>注入对象</li>
<li>提供通用的工具类</li>
</ul>
<p><strong>IoC容器的实现：</strong></p>
<p><code>创建注解 -&gt; 提取标记对象 -&gt; 实现容器 -&gt; 依赖注入</code></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="创建注解"><a href="#创建注解" class="headerlink" title="创建注解"></a>创建注解</h3><p>这里注解的作用和Spring的类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span><span class="comment">//作用在类上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//运行时通过反射获取注解信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="提取标记对象"><a href="#提取标记对象" class="headerlink" title="提取标记对象"></a>提取标记对象</h3><p>实现思路：</p>
<ul>
<li>指定范围，获取范围内的所有类</li>
<li>遍历所有类，获取被注解标记的类并加载进容器里</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> sun.nio.cs.ext.IBM037;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.accessibility.Accessible;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_PROTOCOL</span> <span class="operator">=</span> <span class="string">&quot;file&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取包下的所有类</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * 需要完成的事情：</span></span><br><span class="line"><span class="comment">	 * 1、获取类的加载器：获取项目发布的实际路径</span></span><br><span class="line"><span class="comment">	 * 2、通过类加载器获取到加载的资源信息</span></span><br><span class="line"><span class="comment">	 * 3、依据不同的类型，采用不同的方式获取资源的集合</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getPackageClass(String packageName)&#123;</span><br><span class="line">		<span class="comment">//1、获取类的加载器：获取项目发布的实际路径</span></span><br><span class="line">		<span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> getClassLoader();</span><br><span class="line">		<span class="comment">//2、通过类加载器获取到加载的资源信息</span></span><br><span class="line">		<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> classLoader.getResource(packageName.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>));</span><br><span class="line">		<span class="keyword">if</span> (url == <span class="literal">null</span>)&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;unable to retrieve anything from package, &quot;</span> + packageName);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3、依据不同的类型，采用不同的方式获取资源的集合，这里只要file资源</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (url.getProtocol().equalsIgnoreCase(FILE_PROTOCOL))&#123;</span><br><span class="line">			classSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">			<span class="type">File</span> <span class="variable">packageDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(url.getPath());</span><br><span class="line">			getClassFile(classSet, packageDirectory, packageName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> classSet;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 递归获取</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> classSet class资源的集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> fileSource 文件或者目录</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> packageName 包名</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getClassFile</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; classSet, File fileSource, String packageName)</span> &#123;</span><br><span class="line">		<span class="comment">//如果不是文件，直接return</span></span><br><span class="line">		<span class="keyword">if</span> (!fileSource.isDirectory())&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果是一个文件夹，则调用listFiles方法获取文件夹下的文件或文件夹</span></span><br><span class="line">		File[] files = fileSource.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File file)</span> &#123;</span><br><span class="line">				<span class="comment">//子目录返回true继续</span></span><br><span class="line">				<span class="keyword">if</span> (file.isDirectory())&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//获取文件的绝对路径</span></span><br><span class="line">					<span class="type">String</span> <span class="variable">absoluteFilePath</span> <span class="operator">=</span> file.getAbsolutePath();</span><br><span class="line">					<span class="keyword">if</span> (absoluteFilePath.endsWith(<span class="string">&quot;.class&quot;</span>))&#123;</span><br><span class="line">						<span class="comment">//若是class文件，则直接加载</span></span><br><span class="line">						addToClassSet(absoluteFilePath);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToClassSet</span><span class="params">(String absoluteFilePath)</span> &#123;</span><br><span class="line">				<span class="comment">//1.从class文件的绝对路径里提取包含了package的类名</span></span><br><span class="line">				<span class="comment">//注意：路径最好不要带有中文</span></span><br><span class="line">				<span class="comment">//如：D:\study\SpringSourceCode\spring-framework-5.2.0.RELEASE\simpleframework\src\main\java\com\zjw\entity\User.java</span></span><br><span class="line">				<span class="comment">//弄成：com.zjw.entity.Student</span></span><br><span class="line">				absoluteFilePath = absoluteFilePath.replace(File.separator, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">				<span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> absoluteFilePath.substring(absoluteFilePath.indexOf(packageName));</span><br><span class="line">				className = className.substring(<span class="number">0</span>, className.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">				<span class="comment">//2.通过反射获取对应的class对象并加入到classSet</span></span><br><span class="line">				<span class="type">Class</span> <span class="variable">targetClass</span> <span class="operator">=</span> loadClass(className);</span><br><span class="line">				classSet.add(targetClass);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (files != <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">				<span class="comment">//递归获取</span></span><br><span class="line">				getClassFile(classSet, file, packageName);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 反射获取类</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className)&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> Class.forName(className);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;load class error, &quot;</span>, e);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取ClassLoader</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title function_">getClassLoader</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 实例化类</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> accessible:是否支持创建出私有class对象的实例</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">newInstance</span><span class="params">(Class&lt;?&gt; clazz, <span class="type">boolean</span> accessible)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">			constructor.setAccessible(accessible);</span><br><span class="line">			<span class="keyword">return</span> (T) constructor.newInstance();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;newInstance error&quot;</span>);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置类的属性值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> field 成员变量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> target 类实例</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 成员变量的值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> accessible 是否允许设置私有属性</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setField</span><span class="params">(Field field, Object target, Object value, <span class="type">boolean</span> accessible)</span>&#123;</span><br><span class="line">		field.setAccessible(accessible);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			field.set(target, value);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;setField error&quot;</span>, e);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">File</span> <span class="variable">packageDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\study\\SpringSourceCode\\spring-framework-5.2.0.RELEASE\\simpleframework\\target\\classes\\com\\zjw\\entity&quot;</span>);</span><br><span class="line">		System.out.println(packageDirectory.isDirectory());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写测试类测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.core.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassUnitTest</span> &#123;</span><br><span class="line">	<span class="meta">@DisplayName(&quot;提取目标类方法：getClassPackageTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getClassPackageTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = ClassUtil.getPackageClass(<span class="string">&quot;com.zjw.entity&quot;</span>);</span><br><span class="line">		System.out.println(classSet);</span><br><span class="line">		Assertions.assertEquals(<span class="number">12</span>, classSet.size());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041602520.png" alt="image-20221104151955799"></p>
<h3 id="实现容器"><a href="#实现容器" class="headerlink" title="实现容器"></a>实现容器</h3><h4 id="单例模式问题"><a href="#单例模式问题" class="headerlink" title="单例模式问题"></a>单例模式问题</h4><p>自研容器推荐使用饿汉模式，方便简洁，但是要考虑安全性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarvingSingleton</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StarvingSingleton</span> <span class="variable">starvingSingleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StarvingSingleton</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">StarvingSingleton</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> StarvingSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> starvingSingleton;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种并不安全，可以利用反射机制来破除无参构造private的防御。</p>
<blockquote>
<p><strong>反射为啥能破坏单例？</strong></p>
<p>通过反射获得单例类的构造函数，由于该构造函数是private的，通过setAccessible(true)指示反射的对象在使用时应该取消 <a href="http://lib.csdn.net/base/javase">Java</a> 语言访问检查，使得私有的构造函数能够被访问，这样使得单例模式失效。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射破环</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">		System.out.println(StarvingSingleton.getInstance());</span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> StarvingSingleton.class;</span><br><span class="line">		<span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">		constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		System.out.println(constructor.newInstance());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041602014.png" alt="image-20221102105920885"></p>
<p><strong>解决办法：</strong></p>
<p>采用枚举类。</p>
<blockquote>
<p><strong>枚举为啥不能被反射破环？</strong></p>
<p>参考：<a href="https://www.cnblogs.com/call-me-pengye/p/11214435.html">https://www.cnblogs.com/call-me-pengye/p/11214435.html</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarvingSingletonEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">StarvingSingletonEnum</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> StarvingSingletonEnum <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">ContainerHolder</span>&#123;</span><br><span class="line">		HOLDER;</span><br><span class="line">		<span class="keyword">private</span> StarvingSingletonEnum instance;</span><br><span class="line">		ContainerHolder()&#123;</span><br><span class="line">			instance = <span class="keyword">new</span> <span class="title class_">StarvingSingletonEnum</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">		System.out.println(StarvingSingletonEnum.getInstance());</span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> StarvingSingletonEnum.class;</span><br><span class="line">		<span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">		constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		<span class="type">StarvingSingletonEnum</span> <span class="variable">starvingSingletonEnum</span> <span class="operator">=</span> (StarvingSingletonEnum) constructor.newInstance();</span><br><span class="line">		System.out.println(starvingSingletonEnum.getInstance());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041602966.png" alt="202211021348290"></p>
<p>直接测试枚举类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ContainerHolder.class;</span><br><span class="line">		<span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line"><span class="comment">//		Constructor constructor = clazz.getDeclaredConstructor(String.class, int.class);</span></span><br><span class="line">		constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		System.out.println(constructor.newInstance());</span><br><span class="line">		System.out.println(StarvingSingletonEnum.getInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041601162.png" alt="202211021349240"></p>
<h4 id="容器的组成部分"><a href="#容器的组成部分" class="headerlink" title="容器的组成部分"></a>容器的组成部分</h4><ul>
<li>保存Class对象以及其实例的载体</li>
<li>容器的加载</li>
<li>容器的操作方式</li>
</ul>
<h5 id="保存Class对象以及其实例的载体"><a href="#保存Class对象以及其实例的载体" class="headerlink" title="保存Class对象以及其实例的载体"></a>保存Class对象以及其实例的载体</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放所有被配置标记的目标对象的Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; beanMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h5 id="容器的加载"><a href="#容器的加载" class="headerlink" title="容器的加载"></a>容器的加载</h5><ul>
<li>配置的管理与获取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载bean的注解列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;&gt; BEAN_ANNOTATION =</span><br><span class="line">		Arrays.asList(</span><br><span class="line">				Controller.class,</span><br><span class="line">				Service.class</span><br><span class="line">		);</span><br></pre></td></tr></table></figure>

<ul>
<li>获取指定范围内的Class对象</li>
</ul>
<p>​        上面的<code>getPackageClass</code>方法。</p>
<ul>
<li>依据配置提取Class对象，连同实例一起存入容器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容器是否已经加载过bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loaded</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否已经加载过bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLoaded</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> loaded;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扫描加载所有bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">loadBeans</span><span class="params">(String packageName)</span>&#123;</span><br><span class="line">	<span class="comment">//判断bean容器是否被加载过</span></span><br><span class="line">	<span class="keyword">if</span> (loaded == <span class="literal">true</span>)&#123;</span><br><span class="line">		log.warn(<span class="string">&quot;BeanContainer has been loaded......&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Set&lt;Class&lt;?&gt;&gt; classSet = ClassUtil.getPackageClass(packageName);</span><br><span class="line">	<span class="keyword">if</span> (ValidationUtil.isEmpty(classSet))&#123;</span><br><span class="line">		log.warn(<span class="string">&quot;get nothing from packageName &quot;</span> + packageName);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (Class&lt;?&gt; clazz : classSet) &#123;</span><br><span class="line">		<span class="keyword">for</span> (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation : BEAN_ANNOTATION) &#123;</span><br><span class="line">			<span class="comment">//如果类上面标记了定义的注解</span></span><br><span class="line">			<span class="keyword">if</span> (clazz.isAnnotationPresent(annotation))&#123;</span><br><span class="line">				<span class="comment">//将本类作为键，目标类的实例作为值，存入Map</span></span><br><span class="line">				beanMap.put(clazz, ClassUtil.newInstance(clazz, <span class="literal">true</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	loaded = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.core.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationUtil</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Collection&lt;?&gt; obj)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (obj == <span class="literal">null</span> || obj.isEmpty());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(String obj)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (obj == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(obj));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object[] obj)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (obj == <span class="literal">null</span> || obj.length == <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Map&lt;?, ?&gt; obj)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (obj == <span class="literal">null</span> || obj.isEmpty());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>BeanContainer完整代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.IoC.core.annotation.Component;</span><br><span class="line"><span class="keyword">import</span> org.IoC.core.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.IoC.core.annotation.Repository;</span><br><span class="line"><span class="keyword">import</span> org.IoC.core.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.IoC.utils.ClassUtil;</span><br><span class="line"><span class="keyword">import</span> org.IoC.utils.ValidationUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@NoArgsConstructor(access = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainer</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 存放所有被配置标记的目标对象的Map</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; beanMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 加载bean的注解列表</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;&gt; BEAN_ANNOTATION =</span><br><span class="line">			Arrays.asList(</span><br><span class="line">					Component.class,</span><br><span class="line">					Controller.class,</span><br><span class="line">					Repository.class,</span><br><span class="line">					Service.class</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取Bean的容器实例</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> BeanContainer <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取beans的数量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBeanSize</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.size();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 枚举</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">ContainerHolder</span>&#123;</span><br><span class="line">		HOLDER;</span><br><span class="line">		<span class="keyword">private</span> BeanContainer instance;</span><br><span class="line">		ContainerHolder()&#123;</span><br><span class="line">			instance = <span class="keyword">new</span> <span class="title class_">BeanContainer</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 容器是否已经加载过bean</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loaded</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否已经加载过bean</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLoaded</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> loaded;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 扫描加载所有bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">loadBeans</span><span class="params">(String packageName)</span>&#123;</span><br><span class="line">		<span class="comment">//判断bean容器是否被加载过</span></span><br><span class="line">		<span class="keyword">if</span> (loaded == <span class="literal">true</span>)&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;BeanContainer has been loaded......&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = ClassUtil.getPackageClass(packageName);</span><br><span class="line">		<span class="keyword">if</span> (ValidationUtil.isEmpty(classSet))&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;get nothing from packageName &quot;</span> + packageName);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Class&lt;?&gt; clazz : classSet) &#123;</span><br><span class="line">			<span class="keyword">for</span> (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation : BEAN_ANNOTATION) &#123;</span><br><span class="line">				<span class="comment">//如果类上面标记了定义的注解</span></span><br><span class="line">				<span class="keyword">if</span> (clazz.isAnnotationPresent(annotation))&#123;</span><br><span class="line">					<span class="comment">//将本类作为键，目标类的实例作为值，存入Map</span></span><br><span class="line">					beanMap.put(clazz, ClassUtil.newInstance(clazz, <span class="literal">true</span>));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(beanMap);</span><br><span class="line">		loaded = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置类的属性值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> field 成员变量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> target 类实例</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 成员变量的值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> accessible 是否允许设置私有属性</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setField</span><span class="params">(Field field, Object target, Object value, <span class="type">boolean</span> accessible)</span>&#123;</span><br><span class="line">		field.setAccessible(accessible);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			field.set(target, value);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;setField error&quot;</span>, e);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写测试类测试BeanContainer：</p>
<p>测试之前要记得在com.zjw包下面的impl、controller下的方法分别加上自定义的注解@Service、@Controller，我这里总数为2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerTest</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BeanContainer beanContainer;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@BeforeAll</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">		beanContainer = BeanContainer.getInstance();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadBeansTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Assertions.assertEquals(<span class="literal">false</span>, beanContainer.isLoaded());</span><br><span class="line">		beanContainer.loadBeans(<span class="string">&quot;com.zjw&quot;</span>);</span><br><span class="line">		Assertions.assertEquals(<span class="number">2</span>, beanContainer.getBeanSize()); <span class="comment">// 我只加了两处</span></span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.isLoaded());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果编译成功，说明加了自定义注解的类已经被成功放入到了Map中，打印一下beanMap看看。</p>
<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041600688.png" alt="image-20221102160914939"></p>
<h5 id="容器的操作方式"><a href="#容器的操作方式" class="headerlink" title="容器的操作方式"></a>容器的操作方式</h5><p>涉及到容器的增删改查</p>
<ul>
<li>增加、删除操作</li>
<li>根据Class获取对应实例</li>
<li>获取所有的Class和实例</li>
<li>通过注解来获取被注解标注的Class</li>
<li>通过超类获取对应的子类Class</li>
<li>获取容器载体保存Class的数量</li>
</ul>
<p>下面的方法都写在BeanContainer类下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">addBeans</span><span class="params">(Class&lt;?&gt; clazz, Object bean)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.put(clazz, bean);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">removeBeans</span><span class="params">(Class&lt;?&gt; clazz)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.remove(clazz);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取bean实例</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class&lt;?&gt; clazz)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.get(clazz);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取容器管理的所有Class对象集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClasses()&#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.keySet();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取所有的bean集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">getBeans</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(beanMap.values());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据注解筛选出Bean的Class集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> annotation</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClassesByAnnotation(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation)&#123;</span><br><span class="line">		<span class="comment">//1.获取beanMap的所有class对象</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; keySet = getClasses();</span><br><span class="line">		<span class="keyword">if</span> (ValidationUtil.isEmpty(keySet))&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;nothing in beanMap&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.通过注解筛选被注解标记的class对象，并添加到classSet中</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Class&lt;?&gt; clazz : keySet) &#123;</span><br><span class="line">			<span class="comment">//类是否有相关的注解标记</span></span><br><span class="line">			<span class="keyword">if</span> (clazz.isAnnotationPresent(annotation))&#123;</span><br><span class="line">				classSet.add(clazz);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> classSet.size() &gt; <span class="number">0</span> ? classSet : <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过接口或者父类获取实现类或者子类的Class集合，不包括其本身</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> interfaceOrClass</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClassesBySuper(Class&lt;?&gt; interfaceOrClass)&#123;</span><br><span class="line">		<span class="comment">//1.获取beanMap的所有class对象</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; keySet = getClasses();</span><br><span class="line">		<span class="keyword">if</span> (ValidationUtil.isEmpty(keySet))&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;nothing in beanMap&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.判断keySet中的元素是否是传入的接口或者类的子类，是的话添加到classSet中</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Class&lt;?&gt; clazz : keySet) &#123;</span><br><span class="line">			<span class="comment">//判断keySet中的元素是否是传入的接口或者类的子类</span></span><br><span class="line">			<span class="keyword">if</span> (interfaceOrClass.isAssignableFrom(clazz) &amp;&amp; !clazz.equals(interfaceOrClass))&#123;</span><br><span class="line">				classSet.add(clazz);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> classSet.size() &gt; <span class="number">0</span> ? classSet : <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试某些方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定测试类的执行顺序</span></span><br><span class="line"><span class="meta">@TestMethodOrder(MethodOrderer.OrderAnnotation.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerTest</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BeanContainer beanContainer;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@BeforeAll</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">		beanContainer = BeanContainer.getInstance();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@DisplayName(&quot;测试容器：loadBeansTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="meta">@Order(1)</span> <span class="comment">//最先执行,表示要先加载容器,获取bean，才能执行后面的getBean等方法。</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadBeansTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Assertions.assertEquals(<span class="literal">false</span>, beanContainer.isLoaded());</span><br><span class="line">		beanContainer.loadBeans(<span class="string">&quot;com.zjw&quot;</span>);</span><br><span class="line">		Assertions.assertEquals(<span class="number">2</span>, beanContainer.getBeanSize());</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.isLoaded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@DisplayName(&quot;根据类Class获取实例：getBeanTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="meta">@Order(2)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanTest</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">//可以获取</span></span><br><span class="line">		<span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> (UserController) beanContainer.getBean(UserController.class);</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, userController <span class="keyword">instanceof</span> UserController);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//不可以获取</span></span><br><span class="line">		<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) beanContainer.getBean(User.class);</span><br><span class="line">		Assertions.assertEquals(<span class="literal">null</span>, user);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@DisplayName(&quot;根据注解类型获取对应的实例：getClassesByAnnotationTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="meta">@Order(3)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getClassesByAnnotationTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.isLoaded());</span><br><span class="line">		Assertions.assertEquals(<span class="number">1</span>, beanContainer.getClassesByAnnotation(Controller.class).size());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@DisplayName(&quot;根据接口获取实现类：getClassesBySuperTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="meta">@Order(4)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getClassesBySuperTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.isLoaded());</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.getClassesBySuper(UserService.class).contains(UserServiceImpl.class));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041559274.png" alt="image-20221102172418850"></p>
<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>目前容器里面管理的Bean实例仍可能是不完备的</p>
<ul>
<li>实例里面某些必须的成员变量还没有被创建出来</li>
</ul>
<p>例如，需要添加类似@Autowired的注解将其注入。</p>
<img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041603678.png" alt="202211041600589" style="zoom:67%;" />

<p><strong>实现思路：</strong></p>
<ul>
<li>定义相关的注解标签</li>
<li>实现创建被注解标记的成员变量实例，并将其注入到成员变量里</li>
<li>依赖注入的使用</li>
</ul>
<h4 id="定义相关的注解标签"><a href="#定义相关的注解标签" class="headerlink" title="定义相关的注解标签"></a>定义相关的注解标签</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.inject.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目前支持成员变量注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">	<span class="comment">//用来处理一个接口有多个是实现类的情况,可以给实现类定义一个value区分</span></span><br><span class="line">	String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="实现依赖注入"><a href="#实现依赖注入" class="headerlink" title="实现依赖注入"></a>实现依赖注入</h4><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041604539.png" alt="202211041449933" style="zoom:67%;" />

<p><strong>思路（以上图为例）：</strong></p>
<ol>
<li>首先要获取单例bean容器<code>BeanContainer</code>，目的是将@Controller标记的UserController加载到容器中。</li>
<li>再通过容器获取UserController的Class对象，取出所有的属性（userService、name）。</li>
<li>再筛选出被@Autowired标记的属性（userService）。</li>
<li>获取成员变量的类型。获取这些成员变量的类型在容器里对应的实例（这里UserServiceImpl被@Service标记的）。</li>
<li>通过反射将对应的成员变量实例注入到成员变量所在类的实例里。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.IoC.core.BeanContainer;</span><br><span class="line"><span class="keyword">import</span> org.IoC.inject.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.IoC.utils.ClassUtil;</span><br><span class="line"><span class="keyword">import</span> org.IoC.utils.ValidationUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependencyInjector</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * bean容器 单例</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> BeanContainer beanContainer;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">DependencyInjector</span><span class="params">()</span>&#123;</span><br><span class="line">		beanContainer = BeanContainer.getInstance();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行IoC</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doIoC</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (ValidationUtil.isEmpty(beanContainer.getClasses()))&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;empty classSet in BeanContainer&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 1.遍历Bean容器中所有的类对象</span></span><br><span class="line">		<span class="keyword">for</span> (Class&lt;?&gt; clazz : beanContainer.getClasses()) &#123;</span><br><span class="line">			<span class="comment">// 2.遍历Class对象的所有成员变量</span></span><br><span class="line">			Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">			<span class="comment">//如果为空，则遍历下一个class</span></span><br><span class="line">			<span class="keyword">if</span> (ValidationUtil.isEmpty(fields))&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;获取到的成员变量：&quot;</span> + Arrays.toString(fields));</span><br><span class="line">			<span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">				<span class="comment">// 3.找出被Autowired标记的成员变量</span></span><br><span class="line">				<span class="keyword">if</span> (field.isAnnotationPresent(Autowired.class))&#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;筛选出被Autowire标记的成员变量：&quot;</span> + field);</span><br><span class="line">					<span class="type">Autowired</span> <span class="variable">autowired</span> <span class="operator">=</span> field.getAnnotation(Autowired.class);</span><br><span class="line">					<span class="type">String</span> <span class="variable">autowiredValue</span> <span class="operator">=</span> autowired.value();</span><br><span class="line">					<span class="comment">// 4.获取这些成员变量的类型</span></span><br><span class="line">					Class&lt;?&gt; fieldClass = field.getType();</span><br><span class="line">					<span class="comment">// 5.获取这些成员变量的类型在容器里对应的实例</span></span><br><span class="line">					<span class="type">Object</span> <span class="variable">fieldValue</span> <span class="operator">=</span> getFieldInstance(fieldClass, autowiredValue);</span><br><span class="line">					<span class="keyword">if</span> (fieldValue == <span class="literal">null</span>)&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;unable to inject relevant type, target fieldClass is: &quot;</span></span><br><span class="line">								+ fieldClass.getName() + autowiredValue);</span><br><span class="line">					&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="comment">// 6.通过反射将对应的成员变量实例注入到成员变量所在类的实例里</span></span><br><span class="line">						<span class="type">Object</span> <span class="variable">targetBean</span> <span class="operator">=</span> beanContainer.getBean(clazz);</span><br><span class="line">						ClassUtil.setField(field, targetBean, fieldValue, <span class="literal">true</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据Class在beanContainer里获取其实例或者实现类</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> fieldClass</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> autowiredValue</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Object <span class="title function_">getFieldInstance</span><span class="params">(Class&lt;?&gt; fieldClass, String autowiredValue)</span> &#123;</span><br><span class="line">		<span class="type">Object</span> <span class="variable">fieldValue</span> <span class="operator">=</span> beanContainer.getBean(fieldClass);</span><br><span class="line">		<span class="comment">//直接可以获取到，比如@Contoller标记的</span></span><br><span class="line">		<span class="keyword">if</span> (fieldValue != <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> fieldValue;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//如果是接口，那么你要获取他的是实现类@Service</span></span><br><span class="line">			Class&lt;?&gt; implementedClass = getImplementClass(fieldClass, autowiredValue);</span><br><span class="line">			<span class="keyword">if</span> (implementedClass != <span class="literal">null</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> beanContainer.getBean(implementedClass);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Class&lt;?&gt; getImplementClass(Class&lt;?&gt; fieldClass, String autowiredValue) &#123;</span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = beanContainer.getClassesBySuper(fieldClass);</span><br><span class="line">		<span class="keyword">if</span> (!ValidationUtil.isEmpty(classSet))&#123;</span><br><span class="line">			<span class="comment">//默认value为空</span></span><br><span class="line">			<span class="keyword">if</span> (ValidationUtil.isEmpty(autowiredValue))&#123;</span><br><span class="line">				<span class="comment">//只有一个是实现类</span></span><br><span class="line">				<span class="keyword">if</span> (classSet.size() == <span class="number">1</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> classSet.iterator().next();</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//如果多于两个实现类并且没有指定value，则抛出异常</span></span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;multiple implement class for &quot;</span> + fieldClass.getName());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> (Class&lt;?&gt; clazz : classSet) &#123;</span><br><span class="line">                    <span class="comment">//找到匹配的value</span></span><br><span class="line">					<span class="keyword">if</span> (autowiredValue.equals(clazz.getSimpleName()))&#123;</span><br><span class="line">						<span class="keyword">return</span> clazz;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试一下：</strong></p>
<p><strong>1、UserService只有一个实现类UserServiceImpl。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjw.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> org.IoC.core.BeanContainer;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependencyInjectorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@DisplayName(&quot;依赖注入doIoC&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doIoCTest</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">BeanContainer</span> <span class="variable">beanContainer</span> <span class="operator">=</span> BeanContainer.getInstance();</span><br><span class="line">		beanContainer.loadBeans(<span class="string">&quot;com.zjw&quot;</span>);</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.isLoaded());</span><br><span class="line">		<span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> (UserController) beanContainer.getBean(UserController.class);</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, userController <span class="keyword">instanceof</span> UserController);</span><br><span class="line">		<span class="comment">//UserController要加上@Getter注解，以获取注入的service实例</span></span><br><span class="line">		Assertions.assertEquals(<span class="literal">null</span>, userController.getUserService());</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">DependencyInjector</span>().doIoC();</span><br><span class="line">		Assertions.assertNotEquals(<span class="literal">null</span>, userController.getUserService());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041557805.png" alt="image-20221104151225991"></p>
<p><strong>2、UserService只有一个实现类UserServiceImpl、UserServiceImpl2。</strong></p>
<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041557984.png" alt="image-20221104151327098"></p>
<p>给@Autowired指定value值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(value = &quot;UserServiceImpl&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041557562.png" alt="image-20221104151527252"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img data-src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/MySelfIoC/202211041557293.jpeg" alt="1667547977897"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
