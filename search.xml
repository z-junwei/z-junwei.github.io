<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p><img src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/202211032138367.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2022/11/03/spring/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>hhhhhhhhhhhhhhhhhh</p>
<h3 id="主题1"><a href="#主题1" class="headerlink" title="主题1"></a>主题1</h3><h4 id="主题2"><a href="#主题2" class="headerlink" title="主题2"></a>主题2</h4><h5 id="主题3"><a href="#主题3" class="headerlink" title="主题3"></a>主题3</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* <span class="meta">@param</span> corePoolSize 核心线程池中最大线程数</span><br><span class="line"> * <span class="meta">@param</span> maximumPoolSize 线程池中的最大线程数</span><br><span class="line"> * <span class="meta">@param</span> keepAliveTime 空闲线程的存活时间</span><br><span class="line"> * <span class="meta">@param</span> unit 存活时间的单位</span><br><span class="line"> * <span class="meta">@param</span> workQueue 任务队列，保存已经提交但是还没有执行的任务</span><br><span class="line"> * <span class="meta">@param</span> threadFactory 线程工厂</span><br><span class="line"> * <span class="meta">@param</span> handler 拒绝策略</span><br><span class="line"> * <span class="meta">@throws</span> IllegalArgumentException <span class="keyword">if</span> one of the following holds:&lt;br&gt;</span><br><span class="line"> *         &#123;<span class="meta">@code</span> corePoolSize &lt; <span class="number">0</span>&#125;&lt;br&gt;</span><br><span class="line"> *         &#123;<span class="meta">@code</span> keepAliveTime &lt; <span class="number">0</span>&#125;&lt;br&gt;</span><br><span class="line"> *         &#123;<span class="meta">@code</span> maximumPoolSize &lt;= <span class="number">0</span>&#125;&lt;br&gt;</span><br><span class="line"> *         &#123;<span class="meta">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span><br><span class="line"> * <span class="meta">@throws</span> NullPointerException <span class="keyword">if</span> &#123;<span class="meta">@code</span> workQueue&#125;</span><br><span class="line"> *         or &#123;<span class="meta">@code</span> threadFactory&#125; or &#123;<span class="meta">@code</span> handler&#125; is <span class="literal">null</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span></span><br></pre></td></tr></table></figure>



<p><img src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/202211032137060.jpg"></p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>自研IoC框架</title>
    <url>/2022/11/03/%E8%87%AA%E7%A0%94IoC%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="自研IoC框架"><a href="#自研IoC框架" class="headerlink" title="自研IoC框架"></a>自研IoC框架</h1><h2 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1 实现思路"></a>1 实现思路</h2><p><strong>一个框架最基本的功能：</strong></p>
<ul>
<li>解析配置</li>
<li>定位与注册对象</li>
<li>注入对象</li>
<li>提供通用的工具类</li>
</ul>
<p><strong>Io容器的实现：</strong></p>
<p><code>创建注解 -&gt; 提取标记对象 -&gt; 实现容器 -&gt; 依赖注入</code></p>
<h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h2><h3 id="1-创建注解"><a href="#1-创建注解" class="headerlink" title="1 创建注解"></a>1 创建注解</h3><p>这里注解的作用和Spring的类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span><span class="comment">//作用在类上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//运行时通过反射获取注解信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-提取标记对象"><a href="#2-提取标记对象" class="headerlink" title="2 提取标记对象"></a>2 提取标记对象</h3><p>实现思路：</p>
<ul>
<li>指定范围，获取范围内的所有类</li>
<li>遍历所有类，获取被注解标记的类并加载进容器里</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.core.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_PROTOCOL</span> <span class="operator">=</span> <span class="string">&quot;file&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取包下的所有类</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * 需要完成的事情：</span></span><br><span class="line"><span class="comment">	 * 1、获取类的加载器：获取项目发布的实际路径</span></span><br><span class="line"><span class="comment">	 * 2、通过类加载器获取到加载的资源信息</span></span><br><span class="line"><span class="comment">	 * 3、依据不同的类型，采用不同的方式获取资源的集合</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getPackageClass(String packageName)&#123;</span><br><span class="line">		<span class="comment">//1、获取类的加载器：获取项目发布的实际路径</span></span><br><span class="line">		<span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> getClassLoader();</span><br><span class="line">		<span class="comment">//2、通过类加载器获取到加载的资源信息</span></span><br><span class="line">		<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> classLoader.getResource(packageName.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>));</span><br><span class="line">		<span class="keyword">if</span> (url == <span class="literal">null</span>)&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;unable to retrieve anything from package, &quot;</span> + packageName);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3、依据不同的类型，采用不同的方式获取资源的集合，这里只要file资源</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (url.getProtocol().equalsIgnoreCase(FILE_PROTOCOL))&#123;</span><br><span class="line">			classSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">			<span class="type">File</span> <span class="variable">packageDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(url.getPath());</span><br><span class="line">			getClassFile(classSet, packageDirectory, packageName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> classSet;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 递归获取</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> classSet class资源的集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> fileSource 文件或者目录</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> packageName 包名</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getClassFile</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; classSet, File fileSource, String packageName)</span> &#123;</span><br><span class="line">		<span class="comment">//如果不是文件，直接return</span></span><br><span class="line">		<span class="keyword">if</span> (!fileSource.isDirectory())&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果是一个文件夹，则调用listFiles方法获取文件夹下的文件或文件夹</span></span><br><span class="line">		File[] files = fileSource.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File file)</span> &#123;</span><br><span class="line">				<span class="comment">//子目录返回true继续</span></span><br><span class="line">				<span class="keyword">if</span> (file.isDirectory())&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//获取文件的绝对路径</span></span><br><span class="line">					<span class="type">String</span> <span class="variable">absoluteFilePath</span> <span class="operator">=</span> file.getAbsolutePath();</span><br><span class="line">					<span class="keyword">if</span> (absoluteFilePath.endsWith(<span class="string">&quot;.class&quot;</span>))&#123;</span><br><span class="line">						<span class="comment">//若是class文件，则直接加载</span></span><br><span class="line">						addToClassSet(absoluteFilePath);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToClassSet</span><span class="params">(String absoluteFilePath)</span> &#123;</span><br><span class="line">				<span class="comment">//1.从class文件的绝对路径里提取包含了package的类名</span></span><br><span class="line">				<span class="comment">//注意：路径最好不要带有中文</span></span><br><span class="line">				<span class="comment">//如：D:\study\SpringSourceCode\spring-framework-5.2.0.RELEASE\simpleframework\src\main\java\com\zjw\entity\Student.java</span></span><br><span class="line">				<span class="comment">//弄成：com.zjw.entity.Student</span></span><br><span class="line">				absoluteFilePath = absoluteFilePath.replace(File.separator, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">				<span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> absoluteFilePath.substring(absoluteFilePath.indexOf(packageName));</span><br><span class="line">				className = className.substring(<span class="number">0</span>, className.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">				<span class="comment">//2.通过反射获取对应的class对象并加入到classSet</span></span><br><span class="line">				<span class="type">Class</span> <span class="variable">targetClass</span> <span class="operator">=</span> loadClass(className);</span><br><span class="line">				classSet.add(targetClass);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (files != <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">				<span class="comment">//递归获取</span></span><br><span class="line">				getClassFile(classSet, file, packageName);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 反射获取类</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className)&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> Class.forName(className);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;load class error, &quot;</span>, e);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取ClassLoader</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title function_">getClassLoader</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 实例化类</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> accessible:是否支持创建出私有class对象的实例</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">newInstance</span><span class="params">(Class&lt;?&gt; clazz, <span class="type">boolean</span> accessible)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">			constructor.setAccessible(accessible);</span><br><span class="line">			<span class="keyword">return</span> (T) constructor.newInstance();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;newInstance error&quot;</span>);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">File</span> <span class="variable">packageDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\study\\SpringSourceCode\\spring-framework-5.2.0.RELEASE\\simpleframework\\target\\classes\\com\\zjw\\entity&quot;</span>);</span><br><span class="line">		System.out.println(packageDirectory.isDirectory());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写测试类测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.core.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassUnitTest</span> &#123;</span><br><span class="line">	<span class="meta">@DisplayName(&quot;提取目标类方法：getClassPackageTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getClassPackageTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = ClassUtil.getPackageClass(<span class="string">&quot;com.zjw.entity&quot;</span>);</span><br><span class="line">		System.out.println(classSet);</span><br><span class="line">		Assertions.assertEquals(<span class="number">3</span>, classSet.size());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<p><img src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/202211021006260.png" alt="image-20221101170040640"></p>
<h3 id="3-实现容器"><a href="#3-实现容器" class="headerlink" title="3 实现容器"></a>3 实现容器</h3><h4 id="单例模式问题"><a href="#单例模式问题" class="headerlink" title="单例模式问题"></a>单例模式问题</h4><p>自研容器推荐使用饿汉模式，方便简洁，但是要考虑安全性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarvingSingleton</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StarvingSingleton</span> <span class="variable">starvingSingleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StarvingSingleton</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">StarvingSingleton</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> StarvingSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> starvingSingleton;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种并不安全，可以利用反射机制来破除无参构造private的防御。</p>
<blockquote>
<p><strong>反射为啥能破坏单例？</strong></p>
<p>通过反射获得单例类的构造函数，由于该构造函数是private的，通过setAccessible(true)指示反射的对象在使用时应该取消 <a href="http://lib.csdn.net/base/javase">Java</a> 语言访问检查，使得私有的构造函数能够被访问，这样使得单例模式失效。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射破环</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">		System.out.println(StarvingSingleton.getInstance());</span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> StarvingSingleton.class;</span><br><span class="line">		<span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">		constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		System.out.println(constructor.newInstance());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/202211021059951.png" alt="image-20221102105920885"></p>
<p><strong>解决办法：</strong></p>
<p>采用枚举类。</p>
<blockquote>
<p><strong>枚举为啥不能被反射破环？</strong></p>
<p>参考：<a href="https://www.cnblogs.com/call-me-pengye/p/11214435.html">https://www.cnblogs.com/call-me-pengye/p/11214435.html</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarvingSingletonEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">StarvingSingletonEnum</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> StarvingSingletonEnum <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">ContainerHolder</span>&#123;</span><br><span class="line">		HOLDER;</span><br><span class="line">		<span class="keyword">private</span> StarvingSingletonEnum instance;</span><br><span class="line">		ContainerHolder()&#123;</span><br><span class="line">			instance = <span class="keyword">new</span> <span class="title class_">StarvingSingletonEnum</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">		System.out.println(StarvingSingletonEnum.getInstance());</span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> StarvingSingletonEnum.class;</span><br><span class="line">		<span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">		constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		<span class="type">StarvingSingletonEnum</span> <span class="variable">starvingSingletonEnum</span> <span class="operator">=</span> (StarvingSingletonEnum) constructor.newInstance();</span><br><span class="line">		System.out.println(starvingSingletonEnum.getInstance());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/202211021348290.png" alt="image-20221102134837245" style="zoom: 80%;" />

<p>直接测试枚举类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ContainerHolder.class;</span><br><span class="line">		<span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line"><span class="comment">//		Constructor constructor = clazz.getDeclaredConstructor(String.class, int.class);</span></span><br><span class="line">		constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		System.out.println(constructor.newInstance());</span><br><span class="line">		System.out.println(StarvingSingletonEnum.getInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/202211021349240.png" alt="image-20221102134918203" style="zoom:80%;" />



<h4 id="容器的组成部分"><a href="#容器的组成部分" class="headerlink" title="容器的组成部分"></a>容器的组成部分</h4><ul>
<li>保存Class对象以及其实例的载体</li>
<li>容器的加载</li>
<li>容器的操作方式</li>
</ul>
<h5 id="（1）保存Class对象以及其实例的载体"><a href="#（1）保存Class对象以及其实例的载体" class="headerlink" title="（1）保存Class对象以及其实例的载体"></a><strong>（1）保存Class对象以及其实例的载体</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 存放所有被配置标记的目标对象的Map</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; beanMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>



<h5 id="（2）容器的加载"><a href="#（2）容器的加载" class="headerlink" title="（2）容器的加载"></a><strong>（2）容器的加载</strong></h5><ul>
<li>配置的管理与获取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载bean的注解列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;&gt; BEAN_ANNOTATION =</span><br><span class="line">		Arrays.asList(</span><br><span class="line">				Component.class,</span><br><span class="line">				Controller.class,</span><br><span class="line">				Repository.class,</span><br><span class="line">				Service.class</span><br><span class="line">		);</span><br></pre></td></tr></table></figure>



<ul>
<li>获取指定范围内的Class对象</li>
</ul>
<p>​        上面的<code>getPackageClass</code>方法。</p>
<ul>
<li>依据配置提取Class对象，连同实例一起存入容器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容器是否已经加载过bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loaded</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否已经加载过bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLoaded</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> loaded;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扫描加载所有bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">loadBeans</span><span class="params">(String packageName)</span>&#123;</span><br><span class="line">	<span class="comment">//判断bean容器是否被加载过</span></span><br><span class="line">	<span class="keyword">if</span> (loaded == <span class="literal">true</span>)&#123;</span><br><span class="line">		log.warn(<span class="string">&quot;BeanContainer has been loaded......&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Set&lt;Class&lt;?&gt;&gt; classSet = ClassUtil.getPackageClass(packageName);</span><br><span class="line">	<span class="keyword">if</span> (ValidationUtil.isEmpty(classSet))&#123;</span><br><span class="line">		log.warn(<span class="string">&quot;get nothing from packageName &quot;</span> + packageName);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (Class&lt;?&gt; clazz : classSet) &#123;</span><br><span class="line">		<span class="keyword">for</span> (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation : BEAN_ANNOTATION) &#123;</span><br><span class="line">			<span class="comment">//如果类上面标记了定义的注解</span></span><br><span class="line">			<span class="keyword">if</span> (clazz.isAnnotationPresent(annotation))&#123;</span><br><span class="line">				<span class="comment">//将本类作为键，目标类的实例作为值，存入Map</span></span><br><span class="line">				beanMap.put(clazz, ClassUtil.newInstance(clazz, <span class="literal">true</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	loaded = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.core.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationUtil</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Collection&lt;?&gt; obj)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (obj == <span class="literal">null</span> || obj.isEmpty());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(String obj)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (obj == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(obj));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object[] obj)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (obj == <span class="literal">null</span> || obj.length == <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Map&lt;?, ?&gt; obj)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (obj == <span class="literal">null</span> || obj.isEmpty());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>BeanContainer完整代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.IoC.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.IoC.core.annotation.Component;</span><br><span class="line"><span class="keyword">import</span> org.IoC.core.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.IoC.core.annotation.Repository;</span><br><span class="line"><span class="keyword">import</span> org.IoC.core.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.IoC.utils.ClassUtil;</span><br><span class="line"><span class="keyword">import</span> org.IoC.utils.ValidationUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@NoArgsConstructor(access = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainer</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 存放所有被配置标记的目标对象的Map</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; beanMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 加载bean的注解列表</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;&gt; BEAN_ANNOTATION =</span><br><span class="line">			Arrays.asList(</span><br><span class="line">					Component.class,</span><br><span class="line">					Controller.class,</span><br><span class="line">					Repository.class,</span><br><span class="line">					Service.class</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取Bean的容器实例</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> BeanContainer <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ContainerHolder.HOLDER.instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取beans的数量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBeanSize</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.size();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 枚举</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">ContainerHolder</span>&#123;</span><br><span class="line">		HOLDER;</span><br><span class="line">		<span class="keyword">private</span> BeanContainer instance;</span><br><span class="line">		ContainerHolder()&#123;</span><br><span class="line">			instance = <span class="keyword">new</span> <span class="title class_">BeanContainer</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 容器是否已经加载过bean</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loaded</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否已经加载过bean</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLoaded</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> loaded;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 扫描加载所有bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">loadBeans</span><span class="params">(String packageName)</span>&#123;</span><br><span class="line">		<span class="comment">//判断bean容器是否被加载过</span></span><br><span class="line">		<span class="keyword">if</span> (loaded == <span class="literal">true</span>)&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;BeanContainer has been loaded......&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = ClassUtil.getPackageClass(packageName);</span><br><span class="line">		<span class="keyword">if</span> (ValidationUtil.isEmpty(classSet))&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;get nothing from packageName &quot;</span> + packageName);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Class&lt;?&gt; clazz : classSet) &#123;</span><br><span class="line">			<span class="keyword">for</span> (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation : BEAN_ANNOTATION) &#123;</span><br><span class="line">				<span class="comment">//如果类上面标记了定义的注解</span></span><br><span class="line">				<span class="keyword">if</span> (clazz.isAnnotationPresent(annotation))&#123;</span><br><span class="line">					<span class="comment">//将本类作为键，目标类的实例作为值，存入Map</span></span><br><span class="line">					beanMap.put(clazz, ClassUtil.newInstance(clazz, <span class="literal">true</span>));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(beanMap);</span><br><span class="line">		loaded = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写测试类测试BeanContainer：</p>
<p>测试之前要记得在com.zjw包下面的impl、controller下的方法分别加上自定义的注解@Service、@Controller，我这里总数为2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerTest</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BeanContainer beanContainer;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@BeforeAll</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">		beanContainer = BeanContainer.getInstance();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadBeansTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Assertions.assertEquals(<span class="literal">false</span>, beanContainer.isLoaded());</span><br><span class="line">		beanContainer.loadBeans(<span class="string">&quot;com.zjw&quot;</span>);</span><br><span class="line">		Assertions.assertEquals(<span class="number">2</span>, beanContainer.getBeanSize()); <span class="comment">// 我只加了两处</span></span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.isLoaded());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果编译成功，说明加了自定义注解的类已经被成功放入到了Map中，打印一下beanMap看看。</p>
<p><img src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/202211021609991.png" alt="image-20221102160914939"></p>
<h5 id="（3）容器的操作方式"><a href="#（3）容器的操作方式" class="headerlink" title="（3）容器的操作方式"></a><strong>（3）容器的操作方式</strong></h5><p>涉及到容器的增删改查</p>
<ul>
<li>增加、删除操作</li>
<li>根据Class获取对应实例</li>
<li>获取所有的Class和实例</li>
<li>通过注解来获取被注解标注的Class</li>
<li>通过超类获取对应的子类Class</li>
<li>获取容器载体保存Class的数量</li>
</ul>
<p>下面的方法都写在BeanContainer类下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">addBeans</span><span class="params">(Class&lt;?&gt; clazz, Object bean)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.put(clazz, bean);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">removeBeans</span><span class="params">(Class&lt;?&gt; clazz)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.remove(clazz);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取bean实例</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class&lt;?&gt; clazz)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.get(clazz);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取容器管理的所有Class对象集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClasses()&#123;</span><br><span class="line">		<span class="keyword">return</span> beanMap.keySet();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取所有的bean集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">getBeans</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(beanMap.values());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据注解筛选出Bean的Class集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> annotation</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClassesByAnnotation(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation)&#123;</span><br><span class="line">		<span class="comment">//1.获取beanMap的所有class对象</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; keySet = getClasses();</span><br><span class="line">		<span class="keyword">if</span> (ValidationUtil.isEmpty(keySet))&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;nothing in beanMap&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.通过注解筛选被注解标记的class对象，并添加到classSet中</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Class&lt;?&gt; clazz : keySet) &#123;</span><br><span class="line">			<span class="comment">//类是否有相关的注解标记</span></span><br><span class="line">			<span class="keyword">if</span> (clazz.isAnnotationPresent(annotation))&#123;</span><br><span class="line">				classSet.add(clazz);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> classSet.size() &gt; <span class="number">0</span> ? classSet : <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过接口或者父类获取实现类或者子类的Class集合，不包括其本身</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> interfaceOrClass</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClassesBySuper(Class&lt;?&gt; interfaceOrClass)&#123;</span><br><span class="line">		<span class="comment">//1.获取beanMap的所有class对象</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; keySet = getClasses();</span><br><span class="line">		<span class="keyword">if</span> (ValidationUtil.isEmpty(keySet))&#123;</span><br><span class="line">			log.warn(<span class="string">&quot;nothing in beanMap&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.判断keySet中的元素是否是传入的接口或者类的子类，是的话添加到classSet中</span></span><br><span class="line">		Set&lt;Class&lt;?&gt;&gt; classSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Class&lt;?&gt; clazz : keySet) &#123;</span><br><span class="line">			<span class="comment">//判断keySet中的元素是否是传入的接口或者类的子类</span></span><br><span class="line">			<span class="keyword">if</span> (interfaceOrClass.isAssignableFrom(clazz) &amp;&amp; !clazz.equals(interfaceOrClass))&#123;</span><br><span class="line">				classSet.add(clazz);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> classSet.size() &gt; <span class="number">0</span> ? classSet : <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>测试某些方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定测试类的执行顺序</span></span><br><span class="line"><span class="meta">@TestMethodOrder(MethodOrderer.OrderAnnotation.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanContainerTest</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BeanContainer beanContainer;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@BeforeAll</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">		beanContainer = BeanContainer.getInstance();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@DisplayName(&quot;测试容器：loadBeansTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="meta">@Order(1)</span> <span class="comment">//最先执行,表示要先加载容器,获取bean，才能执行后面的getBean等方法。</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadBeansTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Assertions.assertEquals(<span class="literal">false</span>, beanContainer.isLoaded());</span><br><span class="line">		beanContainer.loadBeans(<span class="string">&quot;com.zjw&quot;</span>);</span><br><span class="line">		Assertions.assertEquals(<span class="number">2</span>, beanContainer.getBeanSize());</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.isLoaded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@DisplayName(&quot;根据类Class获取实例：getBeanTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="meta">@Order(2)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanTest</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">//可以获取</span></span><br><span class="line">		<span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> (UserController) beanContainer.getBean(UserController.class);</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, userController <span class="keyword">instanceof</span> UserController);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//不可以获取</span></span><br><span class="line">		<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) beanContainer.getBean(User.class);</span><br><span class="line">		Assertions.assertEquals(<span class="literal">null</span>, user);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@DisplayName(&quot;根据注解类型获取对应的实例：getClassesByAnnotationTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="meta">@Order(3)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getClassesByAnnotationTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.isLoaded());</span><br><span class="line">		Assertions.assertEquals(<span class="number">1</span>, beanContainer.getClassesByAnnotation(Controller.class).size());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@DisplayName(&quot;根据接口获取实现类：getClassesBySuperTest&quot;)</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="meta">@Order(4)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getClassesBySuperTest</span><span class="params">()</span>&#123;</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.isLoaded());</span><br><span class="line">		Assertions.assertEquals(<span class="literal">true</span>, beanContainer.getClassesBySuper(UserService.class).contains(UserServiceImpl.class));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://zjw-note-images.oss-cn-shanghai.aliyuncs.com/img/202211021724902.png" alt="image-20221102172418850"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
